<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Raid assist</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Enemy list capture</name>
				<script>--With above regex trigger, the captured names are split up by the comma space and stored in a list
--If you start working with other cities or people that call this order list different, add another line and set to perl regex

if matches[2] == ra.Leader then									--Check if group lead called the order
  if matches[2] == gmcp.Comm.Channel.Text.talker 
    and string.find(gmcp.Comm.Channel.Text.text, " "..matches[2]..".") 
    and gmcp.Comm.Channel.Text.channel == "party" then
    ra.target_list = string.split(matches[3], ", ")
    
    --Set target to initial name, only if target is different from first name so it doesn't need to be called later 
    if target ~= ra.target_list[1] then
      target = ra.target_list[1]
      raiseEvent("RA Target Changed")
    end
    
    --Either auto enemies this captured list or sets that it still needs to be enemied
    if ra.Settings.SetEnemy == "Yep" then
    		ra.autoEnemyList()
    	else
    		ra.ListEnemied = "Nope"
    end
  end
end



</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^\(Party\): (\w+) says, \"Target order is: (.+)\.\"$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Enemy list capture 2</name>
				<script>--With above regex trigger, the captured names are split up by the comma space and stored in a list
--If you start working with other cities or people that call this order list different, add another line and set to perl regex

if matches[2] == ra.Leader then									--Check if group lead called the order
  if matches[2] == gmcp.Comm.Channel.Text.talker 
    and string.find(gmcp.Comm.Channel.Text.text, " "..matches[2]..".") 
    and gmcp.Comm.Channel.Text.channel == "party" then
    ra.target_list = string.split(matches[5], ", ")
    
    --Set target to initial name, only if target is different from first name so it doesn't need to be called later 
    if target ~= ra.target_list[1] then
      target = ra.target_list[1]
      raiseEvent("RA Target Changed")
    end
    
    --Either auto enemies this captured list or sets that it still needs to be enemied
    if ra.Settings.SetEnemy == "Yep" then
    		ra.autoEnemyList()
    	else
    		ra.ListEnemied = "Nope"
    end
  end
end



</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^\(Party\): (\w+) says, "I have (\d+) (\w+): (.*)."$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Slain by detect</name>
				<script>
--Capture most recently slain person
ra.slain = matches[2]
local slain = matches[2] 						--Added this extra var to work with since I was having trouble removing the first person to die during large death lists. Could be speed of generating the timers?


if table.contains(ra.SoulList, slain) then												--Added this check incase some how they were already on the Soul list, this removes them to not double them
	table.remove(ra.SoulList, table.index_of(ra.SoulList, slain))
end

table.insert(ra.SoulList, slain)

ra.SoulTimers[tostring(slain)] = tempTimer(45, function()
	table.remove(ra.SoulList, table.index_of(ra.SoulList, slain))
	killTimer(ra.SoulTimers[tostring(slain)])
	end)	


if target == ra.slain and ra.Settings.SetTarget then																	--Check if the person that died is your target and if you are switching targets!!	
		if table.contains(ra.bursted, ra.slain) then																						--Check if just finished bursting and removes the block
			table.remove(ra.bursted, table.index_of(ra.bursted, ra.slain))
		end
		cecho("\n\n\n&lt;OrangeRed&gt;(RA): &lt;LightSalmon&gt;=====================&lt;black:green&gt;====&lt;black:OrangeRed&gt;==Target DIED!!!Target DIED!!!==&lt;black:green&gt;====&lt;LightSalmon:black&gt;=====================")
    cecho("\n&lt;OrangeRed&gt;(RA): &lt;LightSalmon&gt;=====================&lt;black:green&gt;====&lt;black:OrangeRed&gt;==Target DIED!!!Target DIED!!!==&lt;black:green&gt;====&lt;LightSalmon:black&gt;=====================")
    cecho("\n&lt;OrangeRed&gt;(RA): &lt;LightSalmon&gt;=====================&lt;black:green&gt;====&lt;black:OrangeRed&gt;==Target DIED!!!Target DIED!!!==&lt;black:green&gt;====&lt;LightSalmon:black&gt;=====================")
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;LightSalmon&gt;=====================&lt;black:green&gt;====&lt;black:OrangeRed&gt;==Target DIED!!!Target DIED!!!==&lt;black:green&gt;====&lt;LightSalmon:black&gt;=====================\n\n")
			
		tempTimer(0.7, [[ra.Burstcheck(tostring(ra.slain))]])																		--The half second delay on calling the target switch function is to ensure capturing of burst
		
		
	elseif target == ra.slain then	--Inform of death if not swapping targets
    	cecho("\n\n\n&lt;OrangeRed&gt;(RA): &lt;LightSalmon&gt;=====================&lt;black:green&gt;====&lt;black:OrangeRed&gt;==Target DIED!!!Target DIED!!!==&lt;black:green&gt;====&lt;LightSalmon:black&gt;=====================")
    	cecho("\n&lt;OrangeRed&gt;(RA): &lt;LightSalmon&gt;=====================&lt;black:green&gt;====&lt;black:OrangeRed&gt;==Target DIED!!!Target DIED!!!==&lt;black:green&gt;====&lt;LightSalmon:black&gt;=====================")
      cecho("\n&lt;OrangeRed&gt;(RA): &lt;LightSalmon&gt;=====================&lt;black:green&gt;====&lt;black:OrangeRed&gt;==Target DIED!!!Target DIED!!!==&lt;black:green&gt;====&lt;LightSalmon:black&gt;=====================")
			cecho("\n&lt;OrangeRed&gt;(RA): &lt;LightSalmon&gt;=====================&lt;black:green&gt;====&lt;black:OrangeRed&gt;==Target DIED!!!Target DIED!!!==&lt;black:green&gt;====&lt;LightSalmon:black&gt;=====================\n\n")
			
	elseif table.contains(ra.target_list, ra.slain) then 																			--Nice to know people on your target list but not currently your target are dying! 
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;yellow&gt;Someone on target list killed!!")
		 	
	
	elseif targetassist then											--Assess if slain is your group lead to help know you might not be getting more target calls and should switch to Setting targets yourself
  	if targetassist.groupLeader == ra.slain then
  		selectCurrentLine() setBold(true) bg("firebrick") fg("light_cyan") deselect() resetFormat()
  		cecho("&lt;yellow&gt;&lt;---------------------------&lt;black:red&gt;Leader died!!")
  	end
	elseif ra.Leader == ra.slain then		--ra.Leader is variable in the system. Add yours here (or don't)											
		selectCurrentLine() setBold(true) bg("firebrick") fg("light_cyan") deselect() resetFormat()
		cecho("&lt;yellow&gt;&lt;---------------------------&lt;black:red&gt;Leader died!!")
end  










		</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^You have slain (\w+)\.$</string>
					<string>^(\w+) has been slain by \w+\.$</string>
					<string>^Unable to withstand the arrow piercing \w+ chest, (\w+) stumbles to the ground, collapsing in a pool </string>
					<string>^(\w+)\'s body disintegrates and a ghostly spirit rises from the ashes\. The ghost cries out in pain as a body forms around \w+ that has .*\.$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Starbursted detect</name>
				<script>--Makes a separte bursted table that can be cross refed 
--Also checks burst tracking for your target- notifies for target burst personally
--Originally intended to stop removal of their name from target order- not doing that anyways now
--Also, this table used to only track bursting of those on target list, but people get attacked that aren't originally on the list, better to track everyone

local burst = matches[2]
table.insert(ra.bursted, burst)

--starts a timer for how long the name will be on the recently burested list to block autoremoval or target switching- unsure of the time, ?3 seconds?
ra.BurstTimers[tostring(burst)] = tempTimer(3.5, function()
	table.remove(ra.bursted, table.index_of(ra.bursted, burst))
	killTimer(ra.BurstTimers[tostring(burst)])
	end)	

--Strips them from the SoulList so they can stay targeted
if table.contains(ra.SoulList, burst) then
	table.remove(ra.SoulList, table.index_of(ra.SoulList, burst))
end



--Attempts to inform if your target is still alive
if target == matches[2] then
  cecho("\n&lt;OrangeRed&gt;(RA): &lt;cyan&gt;---------------&lt;black:OrangeRed&gt;Target bursted&lt;cyan:black&gt;---------------")
  cecho("\n&lt;OrangeRed&gt;(RA): &lt;cyan&gt;---------------&lt;black:OrangeRed&gt;Target bursted&lt;cyan:black&gt;---------------")
  cecho("\n&lt;OrangeRed&gt;(RA): &lt;cyan&gt;---------------&lt;black:OrangeRed&gt;Target bursted&lt;cyan:black&gt;---------------")
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^A starburst tattoo flares and bathes (\w+) in red light\.$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>RA Target called</name>
				<script>--Reflex to take the target that the leader has called
--Exit statement if targetassist system is present- lets it handle party targeting
if targetassist then return end

--checks if the person yelling the target is the set leader
if matches[2] == ra.Leader then
  if matches[2] == gmcp.Comm.Channel.Text.talker 
    and string.find(gmcp.Comm.Channel.Text.text, " "..matches[2]..".") 
    and gmcp.Comm.Channel.Text.channel == "party" then
    --if auto switching to target calles, will switch and inform
    if ra.Settings.TargetSwitch == "auto" then
      ra.ToTarget = matches[3] 
      target = matches[3] 
      send("settarget "..target, false)
      cecho("\n&lt;OrangeRed&gt;(RA):&lt;black:white&gt;===================Target switched: "..target:upper().."===================")
      cecho("\n&lt;OrangeRed&gt;(RA):&lt;black:white&gt;===================Target switched: "..target:upper().."===================")
      cecho("\n&lt;OrangeRed&gt;(RA):&lt;black:white&gt;===================Target switched: "..target:upper().."===================")
      raiseEvent("RA Target Changed")
      --if you want to exicute the swtich- tells you target was switched and stores it in ToTarget for swap
    elseif ra.Settings.TargetSwitch == "manual" then
      ra.ToTarget = matches[3] 
      send("settarget "..target, false)
      cecho("\n&lt;OrangeRed&gt;(RA):&lt;black:white&gt;===================Party Target is: "..ra.ToTarget:upper().."===================")
      cecho("\n&lt;OrangeRed&gt;(RA):&lt;black:white&gt;===================Party Target is: "..ra.ToTarget:upper().."===================")
      cecho("\n&lt;OrangeRed&gt;(RA):&lt;black:white&gt;===================Party Target is: "..ra.ToTarget:upper().."===================")
    end
  end
end















--Previous version
--[[
--Reflex to take the target that the leader has called
--Exit statement if targetassist system is present- lets it handle party targeting
if targetassist then return end


--checks if the person yelling the target is the set leader
if matches[2] == ra.Leader then
	--if auto switching to target calles, will switch and inform
	if ra.Settings.TargetSwitch == "auto" then
		ra.ToTarget = matches[3]
		target = matches[3]
		cecho("\n&lt;OrangeRed&gt;(RA):&lt;black:white&gt;===================Target switched: "..target:upper().."===================")
		cecho("\n&lt;OrangeRed&gt;(RA):&lt;black:white&gt;===================Target switched: "..target:upper().."===================")
		cecho("\n&lt;OrangeRed&gt;(RA):&lt;black:white&gt;===================Target switched: "..target:upper().."===================")
		raiseEvent("RA Target Changed")
	
	--if you want to exicute the swtich- tells you target was switched and stores it in ToTarget for swap
	elseif ra.Settings.TargetSwitch == "manual" then
		ra.ToTarget = matches[3]
		cecho("\n&lt;OrangeRed&gt;(RA):&lt;black:white&gt;===================Party Target is: "..ra.ToTarget:upper().."===================")
		cecho("\n&lt;OrangeRed&gt;(RA):&lt;black:white&gt;===================Party Target is: "..ra.ToTarget:upper().."===================")
		cecho("\n&lt;OrangeRed&gt;(RA):&lt;black:white&gt;===================Party Target is: "..ra.ToTarget:upper().."===================")
	end
end
--]]

</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^\(Party\): (\w+) says, \"(?:Target|Targeting|TARGETING|TARGET):? (\w+)\.\"$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Loud</name>
					<script>if matches[2] == ra.Leader then
  send("pt Target: "..matches[3])
end
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^\(Party\): (\w+) says, \"(?:Target|Targeting|TARGETING|TARGET):? (\w+)\.\"$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</Trigger>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>RA Full enemy list</name>
				<script>--Trigger is turned on when system is attempting to enemy individuals to assess if enemy list is full

cecho("\n&lt;OrangeRed&gt;(RA:) &lt;SlateGrey&gt;Enemies &lt;IndianRed&gt;maxed!    &lt;SlateGrey&gt;Use zENEMY.")
ra.ListEnemied = "Nope"</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^You have reached your maximum of \d+ allies\/enemies\.$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>RA Embraced death</name>
				<script>if table.contains(ra.SoulList, matches[2]) then
	table.remove(ra.SoulList, table.index_of(ra.SoulList, matches[2]))
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^Seeing (?:his|her) situation to be hopeless, (\w+) embraces the cold clutches of death\.$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>RA Soul detection</name>
				<script>--These 

if table.contains(ra.InRoom, target) then
	if table.contains(ra.target_list, target) then
  	if not table.contains(ra.SoulList, target) then
  		table.insert(ra.SoulList, target)
  	
    	ra.SoulTimers[tostring(target)] = tempTimer(25, function()			--If you try to hit them and they can't be but are still in the Room List they might be a soul... Or a DAMN SERPENT! Screw EVADE! Heheh
    	table.remove(ra.SoulList, table.index_of(ra.SoulList, target))
    	killTimer(ra.SoulTimers[tostring(target)])
    	end)
  	end
  	
  	if ra.Settings.SetTarget then
  		cecho("\n&lt;OrangeRed&gt;(RA): &lt;yellow&gt;---Target might be a soul!! Switching Targets---")
  		cecho("\n&lt;OrangeRed&gt;(RA): &lt;yellow&gt;---Target might be a soul!! Switching Targets---")
  		ra.Burstcheck(tostring(target))	
  	else
  		cecho("\n&lt;OrangeRed&gt;(RA): &lt;yellow&gt;---Target might be a soul!!---")
  		cecho("\n&lt;OrangeRed&gt;(RA): &lt;yellow&gt;---Target might be a soul!!---")
  		cecho("\n&lt;OrangeRed&gt;(RA): &lt;yellow&gt;---Target might be a soul!!---")
  	end
	end
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>You detect nothing here by that name.</string>
					<string>Nothing can be seen here by that name.</string>
					<string>You cannot see that being here.</string>
					<string>Ahh, I am truly sorry, but I do not see anyone by that name here.</string>
					<string>I do not recognise anything called that here.</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>3</integer>
					<integer>3</integer>
					<integer>3</integer>
					<integer>3</integer>
					<integer>3</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Talking soul detection</name>
				<script>if not table.contains(ra.SoulList, matches[2]) then
		table.insert(ra.SoulList, matches[2])
	
  	ra.SoulTimers[tostring(matches[2])] = tempTimer(25, function()
	table.remove(ra.SoulList, table.index_of(ra.SoulList, matches[2]))
	killTimer(ra.SoulTimers[tostring(matches[2])])
	end)	
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^The soul of (\w+) says</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>BW capture</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>100</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Name capture</name>
					<script>setTriggerStayOpen("BW capture", 6)

local names = string.gsub(matches[2], ", and", ",")

names = string.split(names, ", ")


for n, v in pairs (names) do
	if not table.contains(ra.target_list, v) then
		table.insert(ra.target_list, v)
		--ra.autoEnemy(v)																	Removed both because it was too spammy--
		--cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt; Added: &lt;IndianRed&gt;"..v)
	end
end
cecho("\n&lt;OrangeRed&gt;(RA):&lt;SlateGrey&gt; Added city to target order- &lt;lemon_chiffon&gt;zENEMY &lt;SlateGrey&gt;to enemy")

</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>(((\w+), )*and (\w+))\.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>BW close</name>
					<script>setTriggerStayOpen("BW capture", 0)
disableTrigger("BW capture")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^Plus another \d+ whose presence you cannot</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>BW close</name>
					<script>--added incase miss spelled city for now and doesn't run BW to detect the presence of people line- instead prompt kills
setTriggerStayOpen("BW capture", 0)
disableTrigger("BW capture")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>return isPrompt()</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>4</integer>
					</regexCodePropertyList>
				</Trigger>
			</Trigger>
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>RA Opponent movement</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Target left the room</name>
					<script>--cecho("\&lt;green&gt;\nDebug- fired")
if matches[2] == target then
	ra.TargetLeftCheck()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+) leaps majestically to the (\w+)\.$</string>
						<string>^(\w+) flies away to the beyond\.$</string>
						<string>^A look of purest love crosses (\w+)'s face, and (\w+) is summoned away\.$</string>
						<string>^(\w+) steps through a sewer grate and is gone\.$</string>
						<string>^(\w+), riding a (.*), gathers the reins and jumps off to the (\w+)\.$</string>
						<string>^You hear the distant whinny of a wild horse, and (\w+) is gone\.$</string>
						<string>^(\w+), riding a (.*), gallops off to the (\w+)\.$</string>
						<string>^(\w+)'s somersault takes (?:him|her) out of the room to the (\w+)\.$</string>
						<string>^(\w+) does a back handspring to the (\w+), striking you with (?:his|her) feet on the way out\.$</string>
						<string>^(\w+) flips out to the (\w+)\.$</string>
						<string>^(\w+) gathers (?:his|her) legs under (?:him|her) and backflips out to the (\w+).$</string>
						<string>^(\w+) departs to the (\w+), leaving a blaze of heated air in (?:her|his) wake\.$</string>
						<string>^(\w+) moves (?:her|his) huge bulk to the (\w+) with surprising grace\.$</string>
						<string>^(\w+) leaves to the (\w+)\.$</string>
						<string>^(\w+) reaches out and touches (.*) upon the map, and melts effortlessly into the image\.$</string>
						<string>^(\w+) flings a tarot to the ground. Upon contact, it explodes in a great flash of technicolour light and (\w+) is gone\.$</string>
						<string>^A large, rectangular gateway opens up near you, and as you hear the laughing voice of \w+\, (\w+) is drawn through\.$</string>
						<string>^(\w+) suddenly winks out of the room, summoned by the power of \w+\.$</string>
						<string>^(\w+) vanishes to the \w+\, the surroundings seeming to shift in (her|his) wake\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Started tumble</name>
					<script>if matches[2] == target then
	cecho("\n&lt;OrangeRed&gt;(RA): &lt;LightSalmon&gt;===========&lt;LightSalmon:MidnightBlue&gt;Target Started Tumble!&lt;LightSalmon:black&gt;===========")
	cecho("\n&lt;OrangeRed&gt;(RA): &lt;LightSalmon&gt;===========&lt;LightSalmon:MidnightBlue&gt;Target Started Tumble!&lt;LightSalmon:black&gt;===========")
  cecho("\n&lt;OrangeRed&gt;(RA): &lt;LightSalmon&gt;===========&lt;LightSalmon:MidnightBlue&gt;Target Started Tumble!&lt;LightSalmon:black&gt;===========")
end
</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+) begins to tumble towards the (\w+)\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Target not here!</name>
					<script>--These 

if lastCommands[1]:find(target:lower()) or lastCommands[2]:find(target:lower()) then	
  if not table.contains(ra.InRoom, target) then
  	cecho("\n&lt;OrangeRed&gt;(RA): &lt;black:OrangeRed&gt;===================Target likely left!===================&lt;black:DarkViolet&gt;Target not here")
  	cecho("\n&lt;OrangeRed&gt;(RA): &lt;black:OrangeRed&gt;===================Target likely left!===================&lt;black:DarkViolet&gt;Target not here")
  	cecho("\n&lt;OrangeRed&gt;(RA): &lt;black:OrangeRed&gt;===================Target likely left!===================&lt;black:DarkViolet&gt;Target not here")
  end
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You detect nothing here by that name.</string>
						<string>Nothing can be seen here by that name.</string>
						<string>You cannot see that being here.</string>
						<string>Ahh, I am truly sorry, but I do not see anyone by that name here.</string>
						<string>I do not recognise anything called that here.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
						<integer>3</integer>
						<integer>3</integer>
						<integer>3</integer>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>begins to somersault towards the west.</name>
					<script>if matches[2] == target then
	cecho("\n&lt;OrangeRed&gt;(RA): &lt;LightSalmon&gt;===========&lt;LightSalmon:MidnightBlue&gt;Target Started Tumble!&lt;LightSalmon:black&gt;===========")
	cecho("\n&lt;OrangeRed&gt;(RA): &lt;LightSalmon&gt;===========&lt;LightSalmon:MidnightBlue&gt;Target Started Tumble!&lt;LightSalmon:black&gt;===========")
  cecho("\n&lt;OrangeRed&gt;(RA): &lt;LightSalmon&gt;===========&lt;LightSalmon:MidnightBlue&gt;Target Started Tumble!&lt;LightSalmon:black&gt;===========")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+) begins to somersault towards the (\w+).</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Wings</name>
					<script>if matches[2] == target then
	ra.TargetLeftCheck()
end

</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+) is swiftly carried into the skies and out of sight by .*\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Regular movement</name>
					<script>if matches[2] == target then
	ra.TargetLeftCheck()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+) leaves to the (\w+)\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Jester somersault</name>
					<script>if matches[2] == target then
	ra.TargetLeftCheck()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+)'s somersault takes (?:him|her) out of the room to the (\w+)\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Jester leave with hit</name>
					<script>if matches[2] == target then
	ra.TargetLeftCheck()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+) does a back handspring to the (\w+), striking you with (?:his|her) feet on the way out\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Jester flip</name>
					<script>if matches[2] == target then
	ra.TargetLeftCheck()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+) flips out to the (\w+)\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Jester other flip</name>
					<script>if matches[2] == target then
	ra.TargetLeftCheck()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+) gathers (?:his|her) legs under (?:him|her) and backflips out to the (\w+).$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Earring away</name>
					<script>
if matches[2] == target then
	ra.TargetLeftCheck()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^A look of purest love crosses (\w+)'s face, and (\w+) is summoned away\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>RoF</name>
					<script>if matches[2] == target then
	ra.TargetLeftCheck()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+) flies away to the beyond\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Dragon left</name>
					<script>if matches[2] == target then
	ra.TargetLeftCheck()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+) departs to the (\w+), leaving a blaze of heated air in (?:her|his) wake\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Dragon left 2</name>
					<script>if matches[2] == target then
	ra.TargetLeftCheck()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+) moves (?:her|his) huge bulk to the (\w+) with surprising grace\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Entered sewer</name>
					<script>if matches[2] == target then
	ra.TargetLeftCheck()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+) steps through a sewer grate and is gone\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Mount Jump</name>
					<script>if matches[2] == target then
	ra.TargetLeftCheck()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+), riding a (.+), gathers the reins and jumps off to the (\w+)\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Raido home exit</name>
					<script>if matches[2] == target then
	ra.TargetLeftCheck()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You hear the distant whinny of a wild horse, and (\w+) is gone\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Gallop exit</name>
					<script>if matches[2] == target then
	ra.TargetLeftCheck()
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+), riding a (.+), gallops off to the (\w+)\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Room gag</name>
				<script>setTriggerStayOpen("Room gag", 900)

tempTimer(5, [[disableTrigger("Room gag")]]) --This temp timer is a backup to ensure this thing closes for the reason below 

--[[
When this doesn't get killed, there is no information coming through at all. zRESET contains additional reseting power
over this. Another alias - not in help description is zRE to reset just this and not target order.
--]]</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>900</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>if RoomTitle() then return true end</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>4</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="yes" isColorizerTrigger="no" isFilterTrigger="yes" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Soul filter</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>soul of (\w+)</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>Add to soul list</name>
						<script>--This child trigger should take each name filtered to it and run adding them to the SoulList (Code below) for 25 seconds

if not table.contains(ra.SoulList, matches[2]) then
		table.insert(ra.SoulList, matches[2])
	
  	ra.SoulTimers[tostring(matches[2])] = tempTimer(25, function()
		table.remove(ra.SoulList, table.index_of(ra.SoulList, matches[2]))
		killTimer(ra.SoulTimers[tostring(matches[2])])
		end)	
end
cecho("\n&lt;OrangeRed&gt;(RA):   &lt;LemonChiffon&gt;"..matches[2].."   &lt;grey&gt;is a soul!")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>(\w+)</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Delete room lines</name>
					<script>--This removes the spam from the room description after the lines have been process by above patter 
deleteLine()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>.*</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Stop (Room gag)</name>
					<script>--This closes everything up and runs the retargeting

setTriggerStayOpen("Room gag", 0)
ra.RoomTarget()
disableTrigger("Room gag")

</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string></string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>7</integer>
					</regexCodePropertyList>
				</Trigger>
			</Trigger>
			<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Grace detection</name>
				<script>--If who you try to hit is also your target this will inform you and try to avoid them in auto target swapping
if matches[2] == target then
  if table.contains(ra.InRoom, target) then
  	if not table.contains(ra.SoulList, target) then
  		table.insert(ra.SoulList, target)
  	
    	ra.SoulTimers[tostring(target)] = tempTimer(10, function() --Ignored for 10 seconds with auto targeting
    	table.remove(ra.SoulList, table.index_of(ra.SoulList, target))
    	killTimer(ra.SoulTimers[tostring(target)])
    	end)
  	end
  	
  	if ra.Settings.SetTarget then
  		cecho("\n&lt;OrangeRed&gt;(RA): &lt;yellow&gt;-------------Target graced!! Swapping-------------")
  		cecho("\n&lt;OrangeRed&gt;(RA): &lt;yellow&gt;-------------Target graced!! Swapping-------------")
  		cecho("\n&lt;OrangeRed&gt;(RA): &lt;yellow&gt;-------------Target graced!! Swapping-------------")
  		ra.Burstcheck(tostring(target))	
  	else
  		cecho("\n&lt;OrangeRed&gt;(RA): &lt;yellow&gt;-------------Target graced!! SWITCH-------------")
  		cecho("\n&lt;OrangeRed&gt;(RA): &lt;yellow&gt;-------------Target graced!! SWITCH-------------")
  		cecho("\n&lt;OrangeRed&gt;(RA): &lt;yellow&gt;-------------Target graced!! SWITCH-------------")
  	end
  end
end</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^(\w+) walks in Divine Grace\. You may not harm (?:him|her)\.$</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
			</Trigger>
			<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>QW Target Check</name>
				<script>--Should start detection on QW
deleteLine()

</script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>100</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList>
					<string>^(\w+)\, (\w+)</string>
				</regexCodeList>
				<regexCodePropertyList>
					<integer>1</integer>
				</regexCodePropertyList>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Plus another delete</name>
					<script>--Deletes the one line for neatness
deleteLine()</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>Plus another</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>QW detect names</name>
					<script>--This makes temp triggers for each name of the person in the list being loaded
--These temp triggers when they fire will add the name to a table to use later
--The loop stores the temptrigger ID's to delete them after qw to clean up

ra.NameCheck = {}
ra.TempTargetList2 = {}

for _, name in pairs(ra.TempTargetList) do
  ra.NameCheck[name] = tempTrigger(name, function() table.insert(ra.TempTargetList2, name) end, 1)
end

</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+)\, (\w+)</string>
						<string>and</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
						<integer>0</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Close QW check</name>
					<script>--On prompt this shuts things down, and kills all the temptrigger names with their ID's
--Then it uses the list made with the temptriggers TempTargetList2 and compares to the one loaded
--This comparison and addition into the target list is just to ensure the target order is preserved

setTriggerStayOpen("QW Target Check", 0)

for _, id in pairs(ra.NameCheck) do 
	killTrigger(id) 
end

if ra.Settings.SetEnemy == "Yep" then		--If system is handling enemies this unenemies to prepare for change
		send("unenemy all")
end

ra.target_list = {}		--Clear the target order to prepare for new order


for n, v in pairs (ra.TempTargetList) do						--Ensures the list is ordered
  if table.contains(ra.TempTargetList2, v) then
		table.insert(ra.target_list, v)
	end
end

if ra.Settings.SetEnemy == "Yep" then 																					--checks if it should enemy the list
	ra.autoEnemyList()
end	

ra.TempTargetList = {}		--Clear these lists for clean up and later use. 
ra.TempTargetList2 = {}


disableTrigger("QW Target Check") --Turn it all off to not keep going</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string></string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>7</integer>
					</regexCodePropertyList>
				</Trigger>
			</Trigger>
		</TriggerGroup>
	</TriggerPackage>
	<TimerPackage />
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>Raid assist</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<Alias isActive="yes" isFolder="no">
				<name>Raid assist on off</name>
				<script>if matches[2] == "on" then
	enableTrigger("Raid assist")
  RelayAffs = true
	cecho("\n&lt;OrangeRed&gt;(RA): &lt;SpringGreen&gt;On &lt;SlateGrey&gt;and ready!")

elseif matches[2] == "off" then
	disableTrigger("Raid assist")
  RelayAffs = false
	cecho("\n&lt;OrangeRed&gt;(RA): &lt;IndianRed&gt;Off &lt;SlateGrey&gt;and waiting!")
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^z(on|off)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Add enemy</name>
				<script>--Alias to add enemies to the list, and will try to spellcheck with Name database

local new_enemy = matches[2]:lower():title()
local position = matches[3] or #ra.target_list


--NDB check to use it check spelling of targets


if not ndb then
	if not table.contains(ra.target_list, new_enemy) then
		if position &lt; #ra.target_list then
			table.insert(ra.target_list, position, new_enemy)
		else
			table.insert(ra.target_list, new_enemy)
		end
		cecho("\n&lt;OrangeRed&gt;(RA):&lt;SlateGrey&gt;Target order is: &lt;light_blue&gt;"..table.concat(ra.target_list, ", "))
		ra.autoEnemy(new_enemy)
	else
		cecho("\n&lt;OrangeRed&gt;(RA):&lt;SlateGrey&gt;Target is already in the order")
	end
		
	
	--If NDB exists, checks for the persons name
elseif ndb.isperson(new_enemy) then
	if not table.contains(ra.target_list, new_enemy) then
		if tonumber(position) &lt; #ra.target_list then
			cecho("\n&lt;OrangeRed&gt;(RA): &lt;IndianRed&gt;"..new_enemy.." &lt;SlateGrey&gt;sloted at- &lt;cyan&gt;"..position)
			table.insert(ra.target_list, position, new_enemy)
		else
			table.insert(ra.target_list, new_enemy)
		end
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Target order is: &lt;lemon_chiffon&gt;"..table.concat(ra.target_list, ", "))
		
		--Attempt to enemy them or reminder
		ra.autoEnemy(new_enemy)
	else
		cecho("\n&lt;OrangeRed&gt;(RA):&lt;SlateGrey&gt;Target is already in the order")
	end
		
	else
		--If NDB doesn't find them, reports. If they are for sure a person, honors them
		cecho("\n&lt;OrangeRed&gt;(RA):&lt;light_blue&gt; NDB doesn't recognize that name")
end



</script>
				<command></command>
				<packageName></packageName>
				<regex>^zadd (\w+) ?(\d+)?$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Add multiple names</name>
				<script>--Takes multiple names in to add 
--Yes, I agree, this pattern is a little rediculous! Basically it forces entering names with or without comma and won't allow mixing!
--Splits the name up by ,(space) or just spaces if those are used instead
--Runs through the list checking if they are on the targetlist already to skip, and also attempted to enemy



local NameList = matches[2]

if NameList:find(",") then															--This figures out the type of split to run
	NameList = string.split(NameList, ", ")
	else
	NameList = string.split(NameList, " ")
end



for n, v in pairs (NameList) do													--This sends the list into the target order and enemies them if its on
	if not table.contains(ra.target_list, v:title()) then
		table.insert(ra.target_list, v:title())
		ra.autoEnemy(v:title())	
	end
end

cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Added: &lt;IndianRed&gt;" ..table.concat(NameList, ", "))	--Informs the list was recognized





</script>
				<command></command>
				<packageName></packageName>
				<regex>^zmulti ((((\w+)\, )+(\w+))|(((\w+)\ )+(\w+)))$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Remove enemy</name>
				<script>local new_enemy = matches[2]:title()
 
--Remove from the target list
table.remove(ra.target_list, table.index_of(ra.target_list, new_enemy))

--Display current target list
cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Target order is: &lt;lemon_chiffon&gt;"..table.concat(ra.target_list, ", "))

--attempt to unenemy them or reminder
ra.autoUnenemy(new_enemy)

</script>
				<command></command>
				<packageName></packageName>
				<regex>^zremove (\w+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Enemy the list</name>
				<script>--Functions to set the target list to be your enemies

cecho("&lt;OrangeRed&gt;(RA):&lt;SlateGrey&gt; Setting enemies to target list!")

send("Unenemy all", false)																			--If you'd rather only unenemy when its a long list, comment out this and activate the if below, set the number							
--if #ra.target_list &gt; 5 then send("Unenemy all", false) end

for _,v in pairs (ra.target_list) do														--Run a loop over the target list to enemy everyone
	send("Enemy "..v,false)
end


ra.ListEnemied = "Yep"																					--For status report- enemies have been set</script>
				<command></command>
				<packageName></packageName>
				<regex>^zenemy$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Partial name targeting</name>
				<script>-- Uses target order and allows retargeting with first couple letters
local person = matches[2]:lower():title()
local found = false


if table.contains(ra.target_list, person) then 	-- exact match targets
			target = person
			ra.announcer("Single")
			raiseEvent("RA Target Changed")
			found = true
			cecho("\n&lt;OrangeRed&gt;(RA):&lt;lemon_chiffon&gt; Found/targeted &lt;IndianRed&gt;"..target)
			
 	elseif found == false then -- Search target list for a partial match
		for _, v in pairs(ra.target_list) do
			if string.starts(v, person) then
				target = v
				cecho("\n&lt;OrangeRed&gt;(RA):&lt;lemon_chiffon&gt; Found/targeted &lt;IndianRed&gt;"..target)
				ra.announcer("Single")
				raiseEvent("RA Target Changed")
				found = true
				break
			end
		end
end
send("settarget "..target, false)

--If no match, let you know it didn't find one 
if found == false then
	cecho("\n&lt;OrangeRed&gt;(RA):&lt;lemon_chiffon&gt; Didn't match anyone.")
end</script>
				<command></command>
				<packageName></packageName>
				<regex>^zt (\w+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Quick target change</name>
				<script>--Set of if statements to check what type of switch is wanted

if matches[2] == "n" then
		--Next in line to die
    local position = table.index_of(ra.target_list, target)
    if position == nil then											--Need this check incase your target was not on the list
				target = ra.target_list[1]
    	elseif position == #ra.target_list then
    		target = ra.target_list[1]
    	else
    		target = ra.target_list[position+1]
    end
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Next target: &lt;IndianRed&gt;" ..target)
		
	elseif matches[2] == "f" then
		--Lets hit number one again
		target = ra.target_list[1]
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Next target: &lt;IndianRed&gt;" ..target)
		
	elseif matches[2] == "t" then
		target = ra.ToTarget
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;black:white&gt;-----Swapped to party target!-----")
		
	else
		--Take your pick of who gets it!
		target = ra.target_list[tonumber(matches[2])]
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Next target: &lt;IndianRed&gt;" ..target)
end
send("settarget "..target, false)


ra.announcer("Single")
raiseEvent("RA Target Changed")</script>
				<command></command>
				<packageName></packageName>
				<regex>^z(t|n|f|(\d+))$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Reorder enemies</name>
				<script>ra.order_report()</script>
				<command></command>
				<packageName></packageName>
				<regex>^zorder$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Raid leader set</name>
				<script>--Set the leader calling the target list and calling target changes


if targetassist then
    targetassist.groupLeader = matches[2]:lower():title()
    cecho("\n&lt;red&gt;Group leader changed to: &lt;yellow&gt;".. targetassist.groupLeader)
		ra.Leader = matches[2]:title()

		if ra.Leader == "Me" then
				ra.IsLeader = true
			else
				ra.IsLeader = false
		end
	else
		ra.Leader = matches[2]:title()
		cecho("\n&lt;OrangeRed&gt;(RA):&lt;red&gt; Group leader changed to: &lt;yellow&gt;".. ra.Leader)
		if matches[2]:title() == "Me" then
				ra.IsLeader = true
			else
				ra.IsLeader = false
		end
end


</script>
				<command></command>
				<packageName></packageName>
				<regex>^zl (\w+)$</regex>
			</Alias>
			<Alias isActive="no" isFolder="no">
				<name>GL from targetassist</name>
				<script>--Alias overlap with targetassist to tie into leader change for RA to change
--To set yourself- use Me as the leader
ra.Leader = matches[2]:lower():title()

if ra.Leader == "Me" then
		ra.IsLeader = true
	else
		ra.IsLeader = false
end
</script>
				<command></command>
				<packageName></packageName>
				<regex>^gl (\w+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Room targeting</name>
				<script>--Use zr or zrt to check all in room and look at target list to target highest priority person

enableTrigger("Stop (Room gag)")
enableTrigger("Room gag")
send("ql",false)</script>
				<command></command>
				<packageName></packageName>
				<regex>^zrt?$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>City target adding</name>
				<script>--This takes a few different forms of a city name and uses bw to make a target order 
--Before sending the bw text it opens the trigger gate called BW capture 

local city = matches[2]:lower()

if city == "t" or city == "targ" or city == "targossas" then
    enableTrigger("BW capture")
    cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Adding &lt;SpringGreen&gt;Targossas")
    send("bw targossas", false)
	elseif city == "h" or city == "hash" or city == "hashan" then
		enableTrigger("BW capture")
    cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Adding &lt;brown&gt;Hashan")
    send("bw hashan", false)
	elseif city == "e" or city == "eles" or city == "eleusis" then
		enableTrigger("BW capture")
    cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Adding &lt;SpringGreen&gt;Eleusis")
    send("bw Eleusis", false)
	elseif city == "c" or city == "cyr" or city == "cyrene" then
		enableTrigger("BW capture")
    cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Adding &lt;sky_blue&gt;Cyrene")
    send("bw cyrene", false)
	elseif city == "a" or city == "ash" or city == "ashtan" then
		enableTrigger("BW capture")
    cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Adding &lt;orange&gt;Ashtan")
    send("bw ashtan", false)
	elseif city == "m" or city == "mhal" or city == "mhaldor" then
		enableTrigger("BW capture")
    cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Adding &lt;firebrick&gt;Mhaldor")
    send("bw mhaldor", false)
	else
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;City not recognized")
end

</script>
				<command></command>
				<packageName></packageName>
				<regex>^zbw (\w+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Call regardless of leading</name>
				<script>--Overrides allowing to call out target changes (and list order) as if you are the leader- good to have a few people with this on
if ra.Leader ~= "Me" then
  if ra.IsLeader == false then
    	ra.IsLeader = true
    	ra.Settings.OverRide = true
    	cecho("\n&lt;OrangeRed&gt;(RA): &lt;IndianRed&gt;WILL &lt;lemon_chiffon&gt; always call targets!")
  elseif ra.IsLeader == true then
    	ra.IsLeader = false
    	ra.Settings.OverRide = false
    	cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;WON't always call targets!")
	end
	elseif ra.Leader == "Me" then
	cecho("\n&lt;OrangeRed&gt;(RA): &lt;lemon_chiffon&gt;YOU are the &lt;SpringGreen&gt;Leader&lt;lemon_chiffon&gt;, don't worry about this!")	
end
</script>
				<command></command>
				<packageName></packageName>
				<regex>^zloud$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Status report</name>
				<script>cecho("\n&lt;OrangeRed&gt;---Raid system status:") if isActive("Raid assist", "trigger") == 1 then cecho("&lt;OrangeRed&gt;(On)") elseif isActive("Raid assist", "trigger") == 0 then cecho("&lt;IndianRed&gt;(OFF!)")end

if targetassist then
		cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Raid leader:   &lt;cyan&gt;"..targetassist.groupLeader)
	else
		cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Raid leader:   &lt;cyan&gt;"..ra.Leader) 
end
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Targeting:     &lt;dodger_blue&gt;" ..target)
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Enemy list:    &lt;light_blue&gt;" ..table.concat(ra.target_list, ", "))
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Enemied list:  &lt;MistyRose&gt;" .. ra.ListEnemied)
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Auto-enemy:    &lt;MistyRose&gt;" .. ra.Settings.SetEnemy)
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Call target:   &lt;MistyRose&gt;" .. tostring(ra.IsLeader):title())
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Re-Targeting:  &lt;MistyRose&gt;" .. tostring(ra.Settings.SetTarget):title())
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Moved report:  &lt;MistyRose&gt;" .. tostring(ra.Settings.MoveReporting):title())
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;City target:   &lt;MistyRose&gt;" .. ra.Settings.CityTargeting)


if targetassist then
		cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Party target:  &lt;SlateGrey&gt;TA-" .. svo.conf.targetassist)
	else
		cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Party target:  &lt;SlateGrey&gt;" .. ra.Settings.TargetSwitch)
end

 

</script>
				<command></command>
				<packageName></packageName>
				<regex>^zstat$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Status report2</name>
				<script>cecho("\n&lt;OrangeRed&gt;---Raid system status:") if isActive("Raid assist", "trigger") == 1 then cecho("&lt;OrangeRed&gt;(On)") elseif isActive("Raid assist", "trigger") == 0 then cecho("&lt;IndianRed&gt;(OFF!)")end
cecho("&lt;snow&gt;-'zON/zOFF'")

if targetassist then
		cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Raid leader:   &lt;cyan&gt;"..targetassist.groupLeader.." &lt;snow&gt;-'gL'")
	else
		cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Raid leader:   &lt;cyan&gt;"..ra.Leader.." &lt;snow&gt;-'zL'") 
end
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Targeting:     &lt;dodger_blue&gt;" ..target)
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Enemy list:    &lt;light_blue&gt;" ..table.concat(ra.target_list, ", "))
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;List cmds:     &lt;snow&gt;-'zORDER' 'zAdd name (#)' 'zREMOVE name' 'zAR cityletter'")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;List cmds2:    &lt;snow&gt;-'zSWAP name #'")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Enemied list:  &lt;MistyRose&gt;" .. ra.ListEnemied.."   &lt;snow&gt;-'zENEMY'")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Auto-enemy:    &lt;MistyRose&gt;" .. ra.Settings.SetEnemy.."   &lt;snow&gt;-'zAUTO'")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Call target:   &lt;MistyRose&gt;" .. tostring(ra.IsLeader):title().." &lt;snow&gt;-'zC(F)', 'zCALL(F)', 'zLOUD'")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Re-Targeting:  &lt;MistyRose&gt;" .. tostring(ra.Settings.SetTarget):title().." &lt;snow&gt;-'zA' or 'zR to room scan'")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Moved report:  &lt;MistyRose&gt;" .. tostring(ra.Settings.MoveReporting):title().." &lt;snow&gt;-'zREPORT'")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;City target:   &lt;MistyRose&gt;" .. ra.Settings.CityTargeting.." &lt;snow&gt;- 'zCITY name' or letter")
if targetassist then
		cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Party target:  &lt;SlateGrey&gt;TA-" .. svo.conf.targetassist.." &lt;snow&gt;-'nT'")
	else
		cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;Party target:  &lt;SlateGrey&gt;" ..ra.Settings.TargetSwitch.." &lt;snow&gt;-'zT to target', 'zP to toggle setting'")
end
</script>
				<command></command>
				<packageName></packageName>
				<regex>^zstat2$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>Target position swap</name>
				<script>
local name = matches[2]:lower():title() 
local position = matches[3]

if table.contains(ra.target_list, name) and tonumber(position) &lt; #ra.target_list then 
  table.remove(ra.target_list, table.index_of(ra.target_list, name)) 
  table.insert(ra.target_list, position, name)
	cecho("\n&lt;OrangeRed&gt;(RA):&lt;lemon_chiffon&gt; Moved: " ..name.. " to #"..position)
end

if #ra.target_list &lt; tonumber(position) then
	cecho("\n&lt;OrangeRed&gt;(RA):&lt;lemon_chiffon&gt;Order isn’t that long.")
end

if not table.contains(ra.target_list, name) then
	cecho("\n&lt;OrangeRed&gt;(RA): &lt;lemon_chiffon&gt; Name not found in the order.")
end
</script>
				<command></command>
				<packageName></packageName>
				<regex>^zswap (\w+) (\d+)$</regex>
			</Alias>
			<Alias isActive="yes" isFolder="no">
				<name>In room add</name>
				<script>--Pretty straight forward- Takes the city letter or all and looks through the room for who's from their and not on the list and addes them.
--Careful using all! Between this adding friendlies and autotarget switching- you'll start to hit friends eventually.

local city


if matches[2] == "all" then
	local NewNames = {}
	for _,v in pairs(ra.InRoom) do
		if not table.contains(ra.target_list, v) then
				table.insert(ra.target_list, v)
				table.insert(NewNames, v)
		end
	end
	if #NewNames &gt; 0 then
			cecho("\n\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;-Careful! Adding the whole room! Added Targets: &lt;lemon_chiffon&gt;"..table.concat(NewNames, ", "))
		else
			cecho("\n\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;-No new targets found-")
	end
	return
end

if not ndb then --If you set up your own Name data base in the below script delete this check.
	cecho("\n\n&lt;OrangeRed&gt;(RA):&lt;lemon_chiffon&gt;====No Name Database--Need to set this up to work====")
	return
end

if matches[2] == nil then
	if ra.Settings.CityTargeting == "none" then
		cecho("\n&lt;OrangeRed&gt;(RA):&lt;SlateGrey&gt; No city set")
		return
	else
		local NewNames = {}
		city = ra.Settings.CityTargeting
    for _,v in pairs(ra.InRoom) do
    	if not table.contains(ra.target_list, v) then
    		if ndb.getcity(v) == city then
    			table.insert(ra.target_list, v)
    			table.insert(NewNames, v)
    		end
    	end
    end
    if #NewNames &gt; 0 then
    		cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Added these "..city.." Targets: &lt;lemon_chiffon&gt;"..table.concat(NewNames, ", "))
				
				if ra.Settings.SetEnemy == "Yep" then
  				for _,v in pairs (NewNames) do	--Enemy the new people if you have auto enemy going.													
  					send("Enemy "..v,false)
  				end
				end	
    	else
    		cecho("\n\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;-No new targets found from "..city.."-")
    end
		return
	end
end


if matches[2] == "h" then
		city = "Hashan"
	elseif matches[2] == "m" then
		city = "Mhaldor"
	elseif matches[2] == "t" then
		city = "Targossas"
	elseif matches[2] == "a" then
		city = "Ashtan"
	elseif matches[2] == "c" then
		city = "Cyrene"
	elseif matches[2] == "e" then
		city = "Eleusis"
	elseif matches[2] == "r" then
		city = "Rogue"
end
	
local NewNames = {}
for _,v in pairs(ra.InRoom) do
	if not table.contains(ra.target_list, v) then
		if ndb.getcity(v) == city then
			table.insert(ra.target_list, v)
			table.insert(NewNames, v)
		end
	end
end

if #NewNames &gt; 0 then
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Added these "..city.." Targets: &lt;lemon_chiffon&gt;"..table.concat(NewNames, ", "))
		if ra.Settings.SetEnemy == "Yep" then
  			for _,v in pairs (NewNames) do	--Enemy the new people if you have auto enemy going.													
  				send("Enemy "..v,false)
  			end
		end	
	else
		cecho("\n\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;-No new targets found from "..city.."-")
end

	</script>
				<command></command>
				<packageName></packageName>
				<regex>^zar ?(h|m|t|a|c|r|e|all)?$</regex>
			</Alias>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Settings</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Type of target changing</name>
					<script>--Whether you want the system to change targets or not
--Good to set to off if the party lead is alive and calling
--Good to set to on if they're not around- KIA or MIA


if ra.Settings.SetTarget == false then
    	ra.Settings.SetTarget = true
    	cecho("&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;We &lt;SpringGreen&gt;WILL&lt;SlateGrey&gt; handle changing targets!")
	else
    	ra.Settings.SetTarget = false
    	cecho("&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;We &lt;IndianRed&gt;WON'T&lt;SlateGrey&gt; handle changing targets!")
end

</script>
					<command></command>
					<packageName></packageName>
					<regex>^za$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Party targeting</name>
					<script>--checks if targetassist is installed, and lets it handle stuff
if targetassist then
	cecho("&lt;OrangeRed&gt;(RA): &lt;light_blue&gt;Targetassist handles this!")
	ra.Settings.TargetSwitch = "manual"
	return
end

--If its not, allows settings changes to how party target calls are handled
if matches[2] == "p" then
    if ra.Settings.TargetSwitch == "auto" then
    		ra.Settings.TargetSwitch = "manual"
				cecho("&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt; Party targeting: &lt;MistyRose&gt;" ..ra.Settings.TargetSwitch)
    	elseif ra.Settings.TargetSwitch == "manual" then
    		ra.Settings.TargetSwitch = "auto"
				cecho("&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt; Party targeting: &lt;SpringGreen&gt;" ..ra.Settings.TargetSwitch)
    	else
    		ra.Settings.TargetSwitch = "manual"
				cecho("&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt; Party targeting: &lt;MistyRose&gt;" ..ra.Settings.TargetSwitch)
    end
		
	elseif matches[2] == "pauto" then
		ra.Settings.TargetSwitch = "auto"
		cecho("&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt; Party targeting: &lt;SpringGreen&gt;" ..ra.Settings.TargetSwitch)
		
	elseif matches[2] == "pmanual" then
		ra.Settings.TargetSwitch = "manual"
		cecho("&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt; Party targeting: &lt;MistyRose&gt;" ..ra.Settings.TargetSwitch)	
end
</script>
					<command></command>
					<packageName></packageName>
					<regex>^z(p|pauto|pmanual)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Auto enemy toggle</name>
					<script>--Switch auto enemy with za or zauto

if ra.Settings.SetEnemy == "Yep" then
	ra.Settings.SetEnemy = "Nope"
	cecho("&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;We &lt;IndianRed&gt;WON'T&lt;SlateGrey&gt; auto-enemy!")
	else
	ra.Settings.SetEnemy = "Yep"
	cecho("&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;We &lt;SpringGreen&gt;WILL&lt;SlateGrey&gt; auto-enemy!")
end
</script>
					<command></command>
					<packageName></packageName>
					<regex>^zauto$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Force settings save</name>
					<script>ra.saveSettings()</script>
					<command></command>
					<packageName></packageName>
					<regex>^zss$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Force Load settings</name>
					<script>ra.loadSettings()</script>
					<command></command>
					<packageName></packageName>
					<regex>^zls$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Target moved reporting</name>
					<script>if isActive("RA Opponent movement", "trigger") == 0 then
	cecho("&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;We &lt;SpringGreen&gt;WILL&lt;SlateGrey&gt; report target movement!")
	enableTrigger("RA Opponent movement")
	ra.Settings.MoveReporting = true

elseif isActive("RA Opponent movement", "trigger") == 1 then
	cecho("&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;We &lt;IndianRed&gt;WON'T&lt;SlateGrey&gt; report target movement!")
	disableTrigger("RA Opponent movement")
	ra.Settings.MoveReporting = false

end</script>
					<command></command>
					<packageName></packageName>
					<regex>^zreport$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>In room city target setting</name>
					<script>
if matches[2] == nil then
	cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;City capture set to: &lt;IndianRed&gt;"..ra.Settings.CityTargeting.."!")
	return
end

local city = matches[2]:lower()


if city == "t" or city == "targ" or city == "targossas" then
		ra.Settings.CityTargeting = "Targossas" 
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;City capture set to: &lt;IndianRed&gt;Targossas!")
	elseif city == "h" or city == "hash" or city == "hashan" then
		ra.Settings.CityTargeting = "Hashan" 
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;City capture set to: &lt;IndianRed&gt;Hashan!")
	elseif city == "e" or city == "eles" or city == "eleusis" then
		ra.Settings.CityTargeting = "Eleusis"
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;City capture set to: &lt;IndianRed&gt;Eleusis!")
	elseif city == "c" or city == "cyr" or city == "cyrene" then
		ra.Settings.CityTargeting = "Cyrene"
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;City capture set to: &lt;IndianRed&gt;Cyrene!")
	elseif city == "a" or city == "ash" or city == "ashtan" then
		ra.Settings.CityTargeting = "Ashtan"
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;City capture set to: &lt;IndianRed&gt;Ashtan!")
	elseif city == "m" or city == "mhal" or city == "mhaldor" then
		ra.Settings.CityTargeting = "Mhaldor"
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;City capture set to: &lt;IndianRed&gt;Mhaldor!")
  elseif city == "none" or city == "reset" or city == "clear" then
		ra.Settings.CityTargeting = ""
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;City capture set to: &lt;IndianRed&gt;none!")
	else
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;City not recognized")
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^zcity ?(\w+)?$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Presets</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Preset delete</name>
					<script>ra.deletepreset(matches[2])</script>
					<command></command>
					<packageName></packageName>
					<regex>^zdelete (.+)$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Preset lists</name>
					<script>-- Alias for saving, loading (this is a force load attempt, should load fine starting up), and seeing/using a setlist


--save function with a name check
if matches[2] == "save" then
	if matches[3] then		
		ra.save(matches[3])
	elseif matches[3] == nil then
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;lemon_chiffon&gt;Need a name to save with!")
	end
end


--Load 
if matches[2] == "loadsettings" then
	ra.load()
end


--display your presets for using
if matches[2] == "list" then
	ra.displaypresets()
end


--Using a preset
if matches[2] == "set" then
	if matches[3] then
		ra.setpreset(matches[3])
	elseif matches[3] == nil then
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;lemon_chiffon&gt;Need a name to set a preset!")
	end
end

--This uses a preset and checks who is in realms with QW.											
if matches[2] == "load" then
	if matches[3] then	
		local name = matches[3]:lower():title()	
		if table.contains(ra_list, name) then	
			ra.TempTargetList = table.deepcopy(ra_list[tostring(name)])
			enableTrigger("QW Target Check")
			send("qw")
		else
			cecho("\n&lt;OrangeRed&gt;(RA): &lt;lemon_chiffon&gt;Don't know that list!")
		end
		
	elseif matches[3] == nil then
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;lemon_chiffon&gt;Need a name to load preset!")
	end
end









</script>
					<command></command>
					<packageName></packageName>
					<regex>^z(save|loadsettings|set|list|load)(?| (\w+))?$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Announce</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Target order call</name>
					<script>--Alias to call out the target list
--You can force call your known list on pt by adding f to overide not calling stuff 

if ra.IsLeader then
    ra.announcer("full")
	elseif matches[2] == nil then
    	cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;You are &lt;IndianRed&gt;NOT &lt;SlateGrey&gt;the leader. Add &lt;SpringGreen&gt;'f'&lt;SlateGrey&gt; to force call")
    	cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Target order is: &lt;lemon_chiffon&gt;"..table.concat(ra.target_list, ", "))
end

if matches[2] == "f" then
     send(string.format("pt Target order is: %s", table.concat(ra.target_list, ", ")),false)
end</script>
					<command></command>
					<packageName></packageName>
					<regex>^zcall(f)?$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Call current target</name>
					<script>-- if you're the leader, this will call the current target, good for if people as what the target is
-- Can also force announcing the target if not the leader with f modifier similar to zcall for order getServerEncodingsList

if ra.IsLeader then
		ra.announcer("Single")
	elseif matches[2] == "f" then
		cecho("\n&lt;OrangeRed&gt;(RA):&lt;lemon_chiffon&gt; Forcing target call")
     send(string.format("pt Target: %s", target),false)
	else
		cecho("\n&lt;OrangeRed&gt;(RA):&lt;SlateGrey&gt; You are not the leader- add &lt;SpringGreen&gt;'f'&lt;SlateGrey&gt; to force call!")
end
</script>
					<command></command>
					<packageName></packageName>
					<regex>^zc(f)?$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Reseting</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Target list reset</name>
					<script>--Clears the list of targets
ra.target_list = {}

if ra.Settings.SetEnemy == "Yep" then
	send("unenemy all")
end

cecho("\n&lt;OrangeRed&gt;(RA):&lt;yellow&gt; Target order cleared!")
disableTrigger("Room gag")
enableTrigger("Stop (Room gag)")</script>
					<command></command>
					<packageName></packageName>
					<regex>^zreset$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Reset Room triggers</name>
					<script>-- This alias resets the room QL gaging triggers 
disableTrigger("Room gag")
enableTrigger("Stop (Room gag)")
cecho("\n&lt;OrangeRed&gt;(RA):&lt;SlateGrey&gt; Reset Room gag")</script>
					<command></command>
					<packageName></packageName>
					<regex>^zre$</regex>
				</Alias>
			</AliasGroup>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Help</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<Alias isActive="yes" isFolder="no">
					<name>Full help</name>
					<script>cecho("\n&lt;OrangeRed&gt;---Raid system commands: Full---")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zON,OFF&lt;light_blue&gt;-Raid system all on or off")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zSTAT&lt;light_blue&gt;-Raid system info")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zL&lt;light_blue&gt;-Set leader- USE GL if you have TARGET ASSIST!")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zORDER&lt;light_blue&gt;-List target order for reordering")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zCALL(F)&lt;light_blue&gt;-Call target order, F forces announce")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zC(F)&lt;light_blue&gt;-Call current target, F forces announce")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zADD name (#)&lt;light_blue&gt;-Add enemy to list at end or into a spot")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zMULTI name, name, name, ect&lt;light_blue&gt;-Add several enemies at once")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zREMOVE name&lt;light_blue&gt;-Remove enemy from list")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zSWAP &lt;name&gt; &lt;#&gt;&lt;light_blue&gt;-Manual reordering person to a position")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zENEMY&lt;light_blue&gt;-Enemies the target list")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zAUTO&lt;light_blue&gt;-Enable setting enemies automatically")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zA&lt;light_blue&gt;-Turn on target switching if your target dies!")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zN,zF,z#&lt;light_blue&gt;-Next, First, Position target")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zT &lt;partial name&gt;&lt;light_blue&gt;-Target with only first few letters")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zP,zPAUTO/MANUAL&lt;light_blue&gt;-Setting for party leader target switching")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zT&lt;light_blue&gt;-Manual target last leader target call")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zR&lt;light_blue&gt;-Check the room for the highest ordered target and target them")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zLOUD&lt;light_blue&gt;-Make yourself call as if you were leader but not set to lead")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zBW &lt;city letter&gt;&lt;light_blue&gt;- Add complete city to target order")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zAR (h|m|t|a|c|e|r|all)&lt;light_blue&gt;-Adds new people in room from that city to list")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zRESET&lt;light_blue&gt;-Empty target list")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zREPORT&lt;light_blue&gt;-Toggle highlighting target leaving")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zCITY&lt;light_blue&gt;-Change default city to add room targets from")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zLIST&lt;light_blue&gt;-Display saved lists to use")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zDELETE name&lt;light_blue&gt;-Delete a preset")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zSAVE name&lt;light_blue&gt;-Save target order for future")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zLOAD name&lt;light_blue&gt;-Load only those in realms into order")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zSET name&lt;light_blue&gt;-Replicate saved target order")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zSS&lt;light_blue&gt;-Force save settings")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zLS&lt;light_blue&gt;-Force load settings")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zRE&lt;light_blue&gt;-Reset QL room gag without clearing target order")</script>
					<command></command>
					<packageName></packageName>
					<regex>^zhelp2$</regex>
				</Alias>
				<Alias isActive="yes" isFolder="no">
					<name>Help</name>
					<script>cecho("\n&lt;OrangeRed&gt;---Raid system commands: Basic---")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zON,OFF&lt;light_blue&gt;-Raid system all on or off")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zSTAT&lt;light_blue&gt;-Raid system info")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zL&lt;light_blue&gt;-Set leader- USE GL if you have TARGET ASSIST!")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zORDER&lt;light_blue&gt;-List target order for reordering")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zCALL(F)&lt;light_blue&gt;-Call target order, F forces announce")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zC(F)&lt;light_blue&gt;-Call current target, F forces announce")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zADD name (#)&lt;light_blue&gt;-Add enemy to list at end or into a spot")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zMULTI name, name, name, ect&lt;light_blue&gt;-Add several enemies at once")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zREMOVE name&lt;light_blue&gt;-Remove enemy from list")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zSWAP &lt;name&gt; &lt;#&gt;&lt;light_blue&gt;-Manual reordering person to a position")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zENEMY&lt;light_blue&gt;-Enemies the target list")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zAUTO&lt;light_blue&gt;-Enable setting enemies automatically")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zA&lt;light_blue&gt;-Turn on target switching if your target dies!")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zN,zF,z#&lt;light_blue&gt;-Next, First, Position target")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zT &lt;partial name&gt;&lt;light_blue&gt;-Target with only first few letters")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zP,zPAUTO/MANUAL&lt;light_blue&gt;-Setting for party leader target switching")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zT&lt;light_blue&gt;-Manual target last leader target call")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zR&lt;light_blue&gt;-Check the room for the highest ordered target and target them")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zLOUD&lt;light_blue&gt;-Make yourself call as if you were leader but not set to lead")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zBW &lt;city letter&gt;&lt;light_blue&gt;- Add complete city to target order")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zAR (h|m|t|a|c|e|r|all)&lt;light_blue&gt;-Adds new people in room from that city to list")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zLOUD&lt;light_blue&gt;-Make yourself call as if you were leader but not set to lead")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zRESET&lt;light_blue&gt;-Empty target list")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zREPORT&lt;light_blue&gt;-Toggle highlighting target leaving")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zCITY (letter or name)&lt;light_blue&gt;-Change default city to new add room targets from")
cecho("\n&lt;light_blue&gt;-&lt;yellow&gt;zHELP2&lt;light_blue&gt;-Full help list")</script>
					<command></command>
					<packageName></packageName>
					<regex>^zhelp$</regex>
				</Alias>
			</AliasGroup>
		</AliasGroup>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>Raid assist</name>
			<packageName></packageName>
			<script>--Version 1.2
--Set all initial default variables, some will be overwritten when settings finish loading 
ra = ra or {}
ra.Settings = ra.Settings or {}
ra_list = ra_list or {}

ra.Settings.TargetSwitch = ra.Settings.TargetSwitch or "manual"
ra.Settings.SetEnemy = ra.Settings.SetEnemy or "Yep"
ra.Settings.SetTarget = ra.Settings.SetTarget or false
ra.Settings.OverRide = ra.Settings.OverRide or false
ra.Settings.MoveReporting = ra.Settings.MoveReporting or false
ra.Settings.CityTargeting = ra.Settings.CityTargeting or "none"

ra.ListEnemied = ra.ListEnemied or "Nope"
ra.IsLeader = ra.IsLeader or false
ra.Remove = ra.Remove or false
ra.target_list = ra.target_list or {}
ra.BurstTimers = ra.BurstTimer or {}
ra.bursted = ra.bursted or {}
ra.InRoom = ra.InRoom or {}
ra.Leader = ra.Leader or ""
ra.SoulList = ra.SoulList or {}
ra.SoulTimers = ra.SoulTimers or {}
ra.ToTarget = ra.ToTarget or "none"

ra.TempTargetList = ra.TempTargetList or {}

ra.DontTarget = ra.DontTarget or {}


--Turn on use of capturing Leader change if targetassist system is present
if targetassist then
	enableAlias("GL from targetassist")
	else
	disableAlias("GL from targetassist")
	targetassist = false
	
end

--[[
Versions:
0.9- Initial testing begins
Changed colour scheme
Added zBW &lt;city&gt;

0.91-
Added name checking function for reflexes
Added function to place into target alias to capture with manual targeting
Added zSWAP &lt;name&gt; &lt;#&gt; function
Added zLOUD - Allows calling of targets when not the lead
Made slain target check if target is on burst list already for really quick kills to remove them and allow retargting

0.92
Added Soul tracking- Used to skip over dead people when retargeting.. They're on the list for 45 seconds and removed if bursted
Added zt &lt;partial name&gt; ability- used to target someone from the list with only first couple letters for quick switch with partial name 
	-not to be confused with plain zt alias used by people in party to manual swap to target called by leader.
	
Still to add for souls- If message received the person isn't there to hit, compare if your current target variable person is present in the room list 
that is ra.InRoom because if you can't hit them but they are appearing in gmcp.room.players they must be a soul. Add them to the soul list 

0.93
Added detection of a soul with the following methods
- Trying to hit a target and recieving the message they're not able to be hit.. If this happens, these will check ra.InRoom and soul them if they are
- If a soul talks
- From a room description (not on entering a room) When zR is done QL gets done already, so I added trying to pick souls up from room description.. This is not tested yet
		--That reflex looks like this so kinda basic and might not fire with word wrapping hence the previous method... soul of (\w+)  
		
0.94
Changed room descrition capturing of souls. Likely didn't work as intended and captured only one name in 0.93 


0.95
Added
- Adding targets to the order, from the room into target order by city or all. zAR   stands for Add Room  
- Started adding highlights for target leaving room and made toggleable
Changed RoomGag for room targeting to now use the room title to gag room description. NO MORE COLOUR TRIGGERS! YEAH!
Changed zLOAD to check who's online and bring over only them from a target order so you don't have to remove a bunch of people!
Updated zHELP and zSTAT2 a bunch to reflect additions form past and current update 
Made some changes to echos in attempt to show they came from the system for easier tracking down

1.0
Finished fixing a few bugs and implimenting a few more target moved out of room lines
Fixed trying to hit someone thats not your target and the not hear line firing saying target not hear- now the system looks at last command sent for trying to hit target



1.1
Added deliverance and incandescence tracking and avoided targetting

1.2
Added GMCP text checking for anti-illusion measure

		


--]]



</script>
			<eventHandlerList />
			<Script isActive="no" isFolder="no">
				<name>Your stuff</name>
				<packageName></packageName>
				<script>--!!!!!Important below!!!!!
--[[
If you have target tracking stuff or display things that need reseting, put that stuff inside the function ra.YourTargetStuff() below and remove comment blocks
Move this outside of the folder so future updates don't remove your changes
Examples provided inside of the comment blocks below is mine. It's blocked out so if you update- this new one coming in will be disabled and
yours that you took out of the folder will still keep working
--]]



--[[ 					Delete this line here with the brackets

function ra.YourTargetStuff()
	--ak.oresetparse()
	sendAll("unally "..target, "enemy "..target, "st "..target, false)	--Included to ensure target is enemied, good if lead calls a target not on listed. If spammy, remove enemy stuff but keep st target..
	--GUI.Icon4:echo("&lt;center&gt;Target: " .. gmcp.Char.Status.target) 			--Personal GUI display refresh
end

registerAnonymousEventHandler("RA Target Changed", "ra.YourTargetStuff")



--]] --Delete this line with the brackets as well

















--Line below here is used to raise a target change event if you wish to add target switching stuff to the system and run the above function
--raiseEvent("RA Target Changed")</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Useful for you</name>
				<packageName></packageName>
				<script>--This function takes a name you pass it to check if a person is on your target list to act on. Returns true if they are or false
-- Use it like this usually in a reflex... ra.IsTarget(matches[2]) ... if you want to reflexively do something to a person on your list 
function ra.IsTarget(name)
	if table.contains(ra.target_list, name) then
		return true
	else
		return false
	end
end



--This funciton takes a name you give it and adds it to your target list. Good to add this to your general target alias to easily grab names
--See useful code snippets for how to work this in to your alias without adding random stuff to your target list 
function ra.TargetAdd(name)
	if not table.contains(ra.target_list, name) then
		table.insert(ra.target_list, name)
	end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Target change</name>
				<packageName></packageName>
				<script>--Script handling swapping targets
--Burst check gets called if the person who died is your target and you like having your target changed
--Burstcheck looks at a list of recently bursted people and if your target isn't on it, looks for a new target in the room

function ra.Burstcheck(name)
	if not table.contains(ra.bursted, name) then
		ra.RoomTarget()
	end
end

</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Target list ordering</name>
				<packageName></packageName>
				<script>--Display target list for reordering, this makes clickable dialog to shift target order around or remove people
function ra.order_report()

	cecho("\n&lt;OrangeRed&gt;---Reorder target list---  ("..#ra.target_list..")\n")
	
	--For loop to iterate over enemy list to display the clickable links to reorder. Each link calls a below function
	for n,v in pairs (ra.target_list) do
  	
		cechoLink("&lt;blue&gt;^^", [[ra.Shift_top("]]..v..[[")]], "Send "..v.." to first",	true)
		echo(" ")
		cechoLink("&lt;medium_aquamarine&gt;Up", [[ra.Shift_up("]]..v..[[")]], "Send "..v.." up one",	true)
		echo(" ")
		cechoLink("&lt;medium_aquamarine&gt;Down", [[ra.Shift_down("]]..v..[[")]], "Send "..v.." down one",	true)
		echo(" ")
		cechoLink("&lt;blue&gt;vv", [[ra.Shift_bottom("]]..v..[[")]], "Send "..v.." to last",	true)
		echo(" ")
		if ndb then
			if ndb.isperson(v) then --added this check to display with or without class, if NDB doesn't know them then it will still display
				--cecho("&lt;IndianRed&gt;" ..v.. "&lt;grey&gt;("..ndb.getclass(v).. ")") --If NDB is present then the class of each person is added
				cechoLink("&lt;IndianRed&gt;" ..v.. "&lt;grey&gt;("..ndb.getclass(v).. ")",[[appendCmdLine("zswap ]]..v..[[ ")]] ,"", true) 
			else
				--cecho("&lt;IndianRed&gt;" ..v)
				cechoLink("&lt;IndianRed&gt;" ..v,[[appendCmdLine("zswap ]]..v..[[ ")]],"", true) 
			end
		else
			--cecho("&lt;red&gt;" ..v.. "\n")
			cechoLink("&lt;IndianRed&gt;" ..v,[[appendCmdLine("zswap ]]..v..[[ ")]],"", true)
		end
		echo("  ")
		cechoLink("&lt;blue&gt;Remove\n", [[ra.Shift_remove("]]..v..[[")]], "Remove "..v.." from target list",	true)

  end
	echo("\n")
end



--Shift a name up one 
function ra.Shift_up(name)
	local position = table.index_of(ra.target_list, name)
	table.remove(ra.target_list, position)
	table.insert(ra.target_list,position-1,name)
	ra.order_report()
end


--Shift a name down one
function ra.Shift_down(name)
	local position = table.index_of(ra.target_list, name)
	table.remove(ra.target_list, position)
	table.insert(ra.target_list,position+1,name)
	ra.order_report()
end

--Move a name to top of list
function ra.Shift_top(name)
	local position = table.index_of(ra.target_list, name)
	table.remove(ra.target_list, position)
	table.insert(ra.target_list, 1,name)
	ra.order_report()
end

--Move a name to bottom of list
function ra.Shift_bottom(name)
	local position = table.index_of(ra.target_list, name)
	table.remove(ra.target_list, position)
	table.insert(ra.target_list, name)
	ra.order_report()
end

--Remove a name from the list
function ra.Shift_remove(name)
	local position = table.index_of(ra.target_list, name)
	table.remove(ra.target_list, position)
	ra.autoUnenemy(name)
	ra.order_report()
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Save and load presets and settings</name>
				<packageName></packageName>
				<script>--Save function to create presets
function ra.save(name)
	
	--capitalize to avoid errors
	--Uses the variables saveName- what you call the list- and savelist- to copy over ra.target_list to save
	local saveName = name:lower():title()
	local savelist = table.deepcopy(ra.target_list)
	
	--Check if it's already a preset or if the target list is empty to not save
	if table.contains(ra_list, saveName) then
			cecho("\n&lt;OranageRed&gt;(RA): That list already exists!")
		elseif savelist == "" then
			cecho("\n&lt;OranageRed&gt;(RA): Can't save an empty list!")
		else
  		--Adds the enemylist to the storage list ra_list as a key/pair and saves to Mudlet folder folder
			ra_list[tostring(saveName)] = savelist
  		table.save(getMudletHomeDir().."/RaidAssistPresets.lua", ra_list)		--the save command
			cecho("\n&lt;OrangeRed&gt;(RA):&lt;SlateGrey&gt;Saved preset: &lt;cyan&gt;"..saveName)	
	end
end

--Load preset list function
function ra.load()
	if io.exists(getMudletHomeDir().."/RaidAssistPresets.lua") then 			--Check there is a file to load
  	table.load(getMudletHomeDir().."/RaidAssistPresets.lua", ra_list)		--Attempts to load table into ra_list
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;light_blue&gt;Loaded presets..")
	else
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;light_blue&gt; No saved preset list found. Have you saved one before?")
	end
end

--Set targetlist to the requested preset name passed to it
function ra.setpreset(name2)
	local name = name2:lower():title()
	if table.contains(ra_list, name) then
			if ra.Settings.SetEnemy == "Yep" then
				send("unenemy all")
			end
    	ra.target_list = table.deepcopy(ra_list[tostring(name)])											--uses deepcopy to not link the tables 
    	cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Swapped to preset: &lt;cyan&gt;"..name)
		else
			cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;I don't know that list name.")
	end
	if ra.Settings.SetEnemy == "Yep" then 																					--checks if it should enemy the list
		ra.autoEnemyList()
	end	
end


function ra.loadpreset(name2)
	local name = name2:lower():title()
	if table.contains(ra_list, name) then
			if ra.Settings.SetEnemy == "Yep" then
				send("unenemy all")
			end
    	ra.target_list = table.deepcopy(ra_list[tostring(name)])											--uses deepcopy to not link the tables 
    	cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Swapped to preset: &lt;cyan&gt;"..name)
		else
			cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;I don't know that list name.")
	end
	if ra.Settings.SetEnemy == "Yep" then 																					--checks if it should enemy the list
		ra.autoEnemyList()
	end	
end


--Show the stored presets with name to call them
function ra.displaypresets()
	cecho("\n&lt;OrangeRed&gt;(RA): &lt;yellow&gt;Preset target lists: &lt;lemon_chiffon&gt;zLOAD &lt;SlateGrey&gt;(Only people around) &lt;lemon_chiffon&gt; zSET&lt;SlateGrey&gt; (Copy of list)")	
		for k, v in pairs (ra_list) do
			cecho("\n&lt;grey&gt;[&lt;cyan&gt;"..k.. "&lt;grey&gt;]- &lt;light_blue&gt; "..table.concat(v, ", "))
		end
end

--Delete a preset by setting its name (key) to nil and then saves the ra_list table to complete deletion
function ra.deletepreset(name)
	local name = name:title()
	if ra_list == "" then
		cecho("\n&lt;OrangeRed&gt;(RA):&lt;yellow&gt;There's nothing to delete. Did you load your presets?")
	elseif table.contains(ra_list, name) then
		ra_list[tostring(name)] = nil
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;yellow&gt;Successfully deleted preset: &lt;cyan&gt;"..name)
		table.save(getMudletHomeDir().."/RaidAssistPresets.lua", ra_list)
	else
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;yellow&gt;Couldn't find that preset to delete")
	end
end

--Load past configuration settings
function ra.loadSettings()
	if io.exists(getMudletHomeDir().."/RaidAssistSettings.lua") then 							--Check there is a file to load
  	table.load(getMudletHomeDir().."/RaidAssistSettings.lua", ra.Settings)			--Attempts to load table into ra.Settings
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;light_blue&gt;Loaded Raid Assist configurations..")
	else
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;light_blue&gt;No saved settings found. First time starting up?")
	end
  sendGMCP([[Core.Supports.Add ["Comm.Channel 1"] ]]) --This ensures GMCP text module loads 
	target = target or "none" 				--This target variable establishment here is to ensure the system has this if someone isn't using target. They should be but just incase. Should overwrite or screw it up.
	
	if ra.Settings.OverRide == true then --this checkes the setting to override after loading and switches the default false to true
		ra.IsLeader = true
	end

end

--Saves current RA settings for next session- attempts to reduce need to constantly set everything again
function ra.saveSettings()
	table.save(getMudletHomeDir().."/RaidAssistSettings.lua", ra.Settings)
	cecho("\n&lt;OrangeRed&gt;(RA): &lt;light_blue&gt;Settings saved for next time!")
end

registerAnonymousEventHandler("sysExitEvent", "ra.saveSettings")	--Should save on closing
registerAnonymousEventHandler("sysLoadEvent", "ra.loadSettings")	--Load settings with startup
registerAnonymousEventHandler("sysLoadEvent", "ra.load")					--Load presets on startup



</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Raid assist functions</name>
				<packageName></packageName>
				<script>--Handle single auto enemy
function ra.autoEnemy(name)
	local name = name
	if ra.Settings.SetEnemy == "Yep" then
		send("Enemy "..name,false)
		enableTrigger("Full enemy list")
		tempTimer(2, [[disableTrigger("Full enemy list")]])
	else
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Make sure to enemy " ..name)
		ra.ListEnemied = "Nope"
	end
end

--Handle single unenemy
function ra.autoUnenemy(name)
	local name = name
	if ra.Settings.SetEnemy == "Yep" then
		send("Unenemy "..name,false)
	else
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;SlateGrey&gt;Make sure to unenemy " ..name)
	end
end

--List enemy- this function enemies those on the target list, starts a trigger to detect maxing out enemy list as well
function ra.autoEnemyList()
  for _,v in pairs (ra.target_list) do
  	send("Enemy "..v,false)
		enableTrigger("Full enemy list")
		ra.ListEnemied = "Yep"
		tempTimer(4, [[disableTrigger("Full enemy list")]])
  end
end


--Used to call out the target change or call out the target list
function ra.announcer(type)
	if ra.IsLeader then
			if type == "Single" then
      		send(string.format("pt Target: %s", target),false)--Change these if your city/group uses a different syntax
			elseif type == "full" then
					send(string.format("pt Target order is: %s", table.concat(ra.target_list, ", ")),false)
    	end
	end
end


function ra.TargetLeftCheck()
	if not table.contains(ra.InRoom, target) then
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;black:OrangeRed&gt;===================Target likely left!===================")
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;black:OrangeRed&gt;===================Target likely left!===================")
		cecho("\n&lt;OrangeRed&gt;(RA): &lt;black:OrangeRed&gt;===================Target likely left!===================")
	end
end



</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Room targeting</name>
				<packageName></packageName>
				<script>--Full credit to Pyori for this Room capturing code in the Player Targeting scripts- Would have taken me forever to figure out how to do this
function ra.RoomPeople(event)
	if event == "gmcp.Room.Players" then
		
		--Reset people in room, then parse the gmcp list to add people who aren't you.
		ra.InRoom = {}
		local me = gmcp.Char.Status.name:title() 		--establish your name to not add yourself
		for _, tab in pairs(gmcp.Room.Players) do 	--This for loop puts all the names in the table ra.InRoom
			if tab.name ~= me then
				table.insert(ra.InRoom, tab.name)
			end
		end
		
	elseif event == "gmcp.Room.AddPlayer" then		--If someone entered the room, just add them	
	
		--Grab the player from gmcp.
		local person = gmcp.Room.AddPlayer
		--If the person isn't already in the list, then add them.
		if not table.contains(ra.InRoom, person.name) then
			table.insert(ra.InRoom, person.name)
		end
	elseif event == "gmcp.Room.RemovePlayer" then
		local person = gmcp.Room.RemovePlayer
		table.remove(ra.InRoom, table.index_of(ra.InRoom, person))
	end
end

registerAnonymousEventHandler("gmcp.Room.Players", "ra.RoomPeople")					--This makes the above function run when Room.Player data comes in
registerAnonymousEventHandler("gmcp.Room.RemovePlayer", "ra.RoomPeople")		--This runs above function when someone leaves
registerAnonymousEventHandler("gmcp.Room.AddPlayer", "ra.RoomPeople")				--This runa above function when someone enters (not perfect)-Doesn't capture followers?


--This function attempts to compare who is in the room with who is on the target list in order of target list- also cross checks and skips people on SoulList (recent dead)
function ra.RoomTarget()
	for n, v in pairs (ra.target_list) do
    	if table.contains(ra.InRoom, v) and not table.contains(ra.SoulList, v) then
    		target = v
    		cecho("\n&lt;OrangeRed&gt;(RA): &lt;yellow&gt;Found and targeted  &lt;IndianRed&gt;"..target.."!")
				cecho("\n&lt;OrangeRed&gt;(RA): &lt;yellow&gt;Found and targeted  &lt;IndianRed&gt;"..target.."!")
				cecho("\n&lt;OrangeRed&gt;(RA): &lt;yellow&gt;Found and targeted  &lt;IndianRed&gt;"..target.."!")
				raiseEvent("RA Target Changed")	
				ra.announcer("Single")
    		break
    	elseif n == #ra.target_list then
    		cecho("\n&lt;OrangeRed&gt;(RA): &lt;SpringGreen&gt;No enemies from target order found! &lt;cyan&gt;--&gt;Set your own!!")
    		break
    	end
  end
end




</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>Room gag</name>
				<packageName></packageName>
				<script>--This function is used to find the line for where a room description starts 
--Good for either gagging a room description or setting up a gated trigger to read through a room description to pick things up (eg. If people are souls, directions of things)

function RoomTitle()
	local RoomName = gmcp.Room.Info.name
	local Line = getCurrentLine()
	Line = string.gsub(Line, "%." , "")
	
	
	if tostring(Line) == tostring(RoomName) then
		return true
		
		else
		return false
	end
end
</script>
				<eventHandlerList />
			</Script>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Useful code snippets</name>
				<packageName></packageName>
				<script>--[[
-- I recomment adding this to your targeting alias with the following if statement

if ndb.getcity(target) ~= "Cyrene" then
	ra.TargetAdd(target)
end


--Can make it this if you don't want it to add while hunting since their's no lead set
if ra.Leader ~= "" or ra.Leader ~= "none" then
	ra.TargetAdd(target)
end



-- Note: This must be after you set target variable or you won't pass an updated target.. or then it should be this ra.TargetAdd(matches[2])


You can also make both checks happen like this


if ra.Leader ~= "" or ra.Leader ~= "none" then
	if ndb.getcity(target) ~= "Cyrene" then
		ra.TargetAdd(target)
	end
end

--or here it is with some toggle you have on an alias
--For example, in your target alias

if add_target then
	ra.TargetAdd(target)
end

--Separate alias 
pattern- I hate coming up with these so pick something easy

Code--&gt;
add_target = add_target or false
if add_target == false then
		add_target = true
		cecho("\n&lt;lemon_chiffon&gt;-Adding targets to order!")
	else
		add_target = false
		cecho("\n&lt;IndianRed&gt;-Not adding targets to order!")
end



--Also, add this to your target alias, this is for announcing a target change on pt when you perform it with your target alias
and it will only announce when you are either the group leader or calling target changes anyways

ra.announcer("Single")


--]]




</script>
				<eventHandlerList />
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage />
	<VariablePackage>
		<HiddenVariables />
		<Variable>
			<name>target</name>
			<keyType>4</keyType>
			<value>Clear</value>
			<valueType>4</valueType>
		</Variable>
	</VariablePackage>
</MudletPackage>
